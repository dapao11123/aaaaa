{
  "id": 6547,
  "name": "shader test2",
  "fragment": "precision highp float;\nprecision highp int;\nuniform float time;\nuniform vec3 baseColor;\nuniform float brightness;\nuniform float scale;\nvec4 thresholdBlend(vec4 color1, vec4 color2, float threshold, float bleed) \n                {\n                    if (length(color1) > threshold) \n                    {\n                        return color2 * bleed + color1;\n                    }\n                     return color1 * bleed + color2;\n                }\nvarying vec3 Electricity1678647724688_515_vPosition;\nvec3 mod289(vec3 x) \n                {\n                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                }\nvec2 mod289(vec2 x) \n                {\n                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                }\nvec3 permute(vec3 x) \n                {\n                    return mod289(((x * 34.0) + 1.0) * x);\n                }\nfloat snoise(vec2 v) \n                {\n                    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n                    vec2 i = floor(v + dot(v, C.yy));\n                    vec2 x0 = v - i + dot(i, C.xx);\n                    vec2 i1;\n                    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n                    vec4 x12 = x0.xyxy + C.xxzz;\n                    x12.xy -= i1;\n                    i = mod289(i);\n                    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n                    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n                    m = m * m;\n                    m = m * m;\n                    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n                    vec3 h = abs(x) - 0.5;\n                    vec3 ox = floor(x + 0.5);\n                    vec3 a0 = x - ox;\n                    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n                    vec3 g;\n                    g.x = a0.x * x0.x + h.x * x0.y;\n                    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n                    return 130.0 * dot(m, g);\n                }\nvarying vec2 Star_Swamp_3D_version_1678648271492_597_vUv;\nvarying vec3 Star_Swamp_3D_version_1678648271492_597_vPosition;\nvarying vec3 Star_Swamp_3D_version_1678648271492_597_vNormal;\nfloat field(in vec3 p) \n                {\n                    float strength = 7. + .03 * log(1.e-6 + fract(sin(1.0) * 4373.11));\n                    float accum = 0.;\n                    float prev = 0.;\n                    float tw = 0.;\n                    for (int i = 0;\n i < 32; ++i) \n                    {\n                        float mag = dot(p, p);\n                        p = abs(p) / mag + vec3(-.51, -.4, -1.3);\n                        float w = exp(-float(i) / 7.);\n                        accum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n                        tw += w;\n                        prev = mag;\n                    }\n                    return max(0., 5. * accum / tw - .2);\n                }\nvec3 nrand3(vec2 co) \n                {\n                    vec3 a = fract(cos(co.x * 8.3e-3 + co.y) * vec3(1.3e5, 4.7e5, 2.9e5));\n                    vec3 b = fract(sin(co.x * 0.3e-3 + co.y) * vec3(8.1e5, 1.0e5, 0.1e5));\n                    vec3 c = mix(a, b, 0.5);\n                    return c;\n                }\nvec4 Electricity1678647724688_515_main(void) \n                {\n                    vec4 Electricity1678647724688_515_gl_FragColor = vec4(0.0);\n                    vec3 pos = Electricity1678647724688_515_vPosition;\n                    pos.x *= 0.5;\n                    float noise = snoise(vec2(pos.x * 4.0, time * 0.8));\n                    float point = (1.0 - pow(2.0 * abs(pos.x), 2.0)) * (sin(time * 0.8) * 0.1 + 0.12 * noise + pow(snoise(vec2(pos.x * 7.0, time * 2.0)), 4.0) * 0.1);\n                    float point2 = (1.0 - pow(2.0 * abs(pos.x), 2.0)) * (sin(time * 0.8) * 0.1 + 0.15 * noise + pow(snoise(vec2(pos.x * 5.0, time * 2.0)), 3.0) * 0.12);\n                    float point3 = (1.0 - pow(2.0 * abs(pos.x), 2.0)) * (sin(time * 0.8) * 0.1 + 0.1 * snoise(vec2(pos.x * 2.0, (time) * 0.5)));\n                    float color = 1.0 - pow(abs(point - pos.y), 0.2);\n                    float color2 = 1.0 - pow(abs(point2 - pos.y), 0.2);\n                    float color3 = 1.0 - pow(abs(point3 - pos.y), 0.2);\n                    color3 = pow(color3, 2.0);\n                    color2 = pow(color2, 2.0);\n                    color = pow(color, 2.0);\n                    Electricity1678647724688_515_gl_FragColor = vec4(color * 0.2 + color2 * 0.4 + color3 * 0.7, color * 0.7 + color2 * 0.5 + color3 * 0.8, color * 1.0 + color2 * 1.0 + color3 * 1.0, 1.0);\n                    return Electricity1678647724688_515_gl_FragColor *= 1.0;\n                }\nvec4 Star_Swamp_3D_version_1678648271492_597_main() \n                {\n                    vec4 Star_Swamp_3D_version_1678648271492_597_gl_FragColor = vec4(0.0);\n                    vec3 pos = Star_Swamp_3D_version_1678648271492_597_vPosition / scale;\n                    vec3 p = vec3(pos / 4.) + vec3(2., -1.3, -1.);\n                    p += 0.18 * vec3(sin(1.0 / 16.), sin(1.0 / 12.), sin(1.0 / 128.));\n                    vec3 p2 = vec3(pos / (4. + sin(1.0 * 0.11) * 0.2 + 0.2 + sin(1.0 * 0.15) * 0.3 + 0.4)) + vec3(2., -1.3, -1.);\n                    p2 += 0.2 * vec3(sin(1.0 / 16.), sin(1.0 / 12.), sin(1.0 / 128.));\n                    vec3 p3 = vec3(pos / (4. + sin(1.0 * 0.14) * 0.23 + 0.23 + sin(1.0 * 0.19) * 0.31 + 0.31)) + vec3(2., -1.3, -1.);\n                    p3 += 0.25 * vec3(sin(1.0 / 16.), sin(1.0 / 12.), sin(1.0 / 128.));\n                    float t = field(p);\n                    float t2 = field(p2);\n                    float t3 = field(p3);\n                    float v = (1. - exp((abs(pos.x) - 1.) * 6.)) * (1. - exp((abs(pos.y) - 1.) * 6.)) * (1. - exp((abs(pos.z) - 1.) * 6.));\n                    vec3 c1 = mix(.9, 1., v) * vec3(1.8 * t * t * t, 1.4 * t * t, t);\n                    vec3 c2 = mix(.8, 1., v) * vec3(1.9 * t2 * t2 * t2, 1.8 * t2 * t2, t2);\n                    vec3 c3 = mix(.8, 1., v) * vec3(1.4 * t3 * t3 * t3, 1.8 * t3 * t3, t3);\n                    c1 *= baseColor;\n                    c2 *= baseColor;\n                    c3 *= baseColor;\n                    Star_Swamp_3D_version_1678648271492_597_gl_FragColor = vec4(brightness * vec3(c1 * 0.7 + c2 * 0.9 + c3 * 0.1), 1.0);\n                    return Star_Swamp_3D_version_1678648271492_597_gl_FragColor *= 1.0;\n                }\nvoid main() \n                {\n                    gl_FragColor = thresholdBlend(\n            Star_Swamp_3D_version_1678648271492_597_main(),\n            thresholdBlend(\n            (\n            Electricity1678647724688_515_main() *\n            10.0\n        ),\n            Electricity1678647724688_515_main(),\n            1.1,\n            0.0\n        ),\n            1.1,\n            0.0\n        );                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvec4 thresholdBlend(vec4 color1, vec4 color2, float threshold, float bleed) \n                {\n                    if (length(color1) > threshold) \n                    {\n                        return color2 * bleed + color1;\n                    }\n                     return color1 * bleed + color2;\n                }\nvarying vec3 Electricity1678647724688_515_vPosition;\nvarying vec3 Electricity1678647724688_515_vNormal;\nvarying vec2 Electricity1678647724688_515_vUv;\nvarying vec2 vUv2;\nvarying vec2 Star_Swamp_3D_version_1678648271492_597_vUv;\nvarying vec3 Star_Swamp_3D_version_1678648271492_597_vPosition;\nvarying vec3 Star_Swamp_3D_version_1678648271492_597_vNormal;\nvec4 Electricity1678647724688_515_main() \n                {\n                    vec4 Electricity1678647724688_515_gl_Position = vec4(0.0);\n                    Electricity1678647724688_515_vNormal = normal;\n                    Electricity1678647724688_515_vUv = uv;\n                    vUv2 = uv2;\n                    Electricity1678647724688_515_vPosition = position;\n                    Electricity1678647724688_515_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    return Electricity1678647724688_515_gl_Position *= 1.0;\n                }\nvec4 Star_Swamp_3D_version_1678648271492_597_main() \n                {\n                    vec4 Star_Swamp_3D_version_1678648271492_597_gl_Position = vec4(0.0);\n                    Star_Swamp_3D_version_1678648271492_597_vUv = uv;\n                    Star_Swamp_3D_version_1678648271492_597_vPosition = position;\n                    Star_Swamp_3D_version_1678648271492_597_vNormal = normal;\n                    Star_Swamp_3D_version_1678648271492_597_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    return Star_Swamp_3D_version_1678648271492_597_gl_Position *= 1.0;\n                }\nvoid main() \n                {\n                    gl_Position = Electricity1678647724688_515_main() + Star_Swamp_3D_version_1678648271492_597_main();                }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "baseColor": {
      "value": {
        "r": 0.8156862745098039,
        "g": 0.25098039215686274,
        "b": 0.25098039215686274
      },
      "type": "c",
      "glslType": "vec3"
    },
    "brightness": {
      "value": "2.5",
      "type": "f",
      "glslType": "float"
    },
    "scale": {
      "value": "3.11662184",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/6547",
  "user": {
    "username": "Tobisonics",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}